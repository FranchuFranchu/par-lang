type Nat = recursive either {
  .zero !
  .succ self
}

dec zero: Nat
def zero = .zero!
dec one: Nat
def one = .succ .zero !
dec two: Nat
def two = .succ .succ .zero !

dec Nat_add: [Nat] [Nat] Nat
def Nat_add = [n] [m] n begin {
  .zero! => m,
  .succ n => .succ n loop
}

def three = Nat_add(one)(two)

dec Nat_era: [Nat] !
def Nat_era = [n] n begin {
  .zero! => !
  .succ n => n loop
}

dec Nat_dup: [Nat] (Nat) Nat
def Nat_dup = [n] n begin {
  .zero! => (.zero!) .zero!
  .succ n => let (a)b = n loop in
    (.succ a) .succ b
}

dec Nat_mul: [Nat] [Nat] Nat
def Nat_mul = [n] [m] n begin {
  .zero! => do {Nat_era(m)?} in zero,
  .succ n => let (m2)m = Nat_dup(m) in
    Nat_add(m2)(n loop)
}

type Stream<T> = iterative {
  .end => !
  .next => (T) self
}

dec nats: Stream<Nat>
def nats = let m = zero in
  begin {
    .end => Nat_era(m),
    .next => {
      let (m2)m = Nat_dup(m) in
      let m: Nat = .succ m in
      (m2) loop
    }
  }

type Dup<T> = iterative {
  .end => !
  .new => (self) self
  .dup(T) => (T) (T) self
}
type Era<T> = iterative {
  .end => !
  .new => (self) self
  .era(T) => self
}

dec instDupNat: Dup<Nat>
def instDupNat = begin {
  .end => !
  .new => (loop) loop
  .dup(n) => let (n2)n = Nat_dup(n) in (n2)(n) loop
}
dec instEraNat: Era<Nat>
def instEraNat = begin {
  .end => !
  .new => (loop) loop
  .era(n) => do {Nat_era(n)?} in loop
}

type Add<T> = iterative {
  .end => !
  .new => (self) self
  .add(T)(T) => (T) self
}

dec instAddNat: Add<Nat>
def instAddNat = begin {
  .end => !
  .new => (loop) loop
  .add(n)(m) => (Nat_add(n)(m)) loop
}

type Mul<T> = iterative {
  .end => !
  .new => (self) self
  .mul(T)(T) => (T) self
}

dec instMulNat: Mul<Nat>
def instMulNat = begin {
  .end => !
  .new => (loop) loop
  .mul(n)(m) => (Nat_mul(n)(m)) loop
}

type Option<T> = either {
  .none!
  .some T
}

dec instEraOption: [type T] [Era<T>] Era<Option<T>>
def instEraOption = [type T] [instEra] begin {
  .end => do {instEra.end?} in !
  .new => do {instEra.new[instEra2]} in (loop) let instEra = instEra2 in loop
  .era(option) => option {
    .none! => loop
    .some t => do {instEra.era(t)} in loop
  }
}

type Stack<T> = recursive either {
  .empty!
  .item (T) self
}

dec Stack_new: [type T] Stack<T>
def Stack_new = [type T] .empty!

dec instEraStack: [type T] [Era<T>] Era<Stack<T>>
def instEraStack = [type T] [instEra] begin :out {
  .end => do {instEra.end?} in !
  .new => do {instEra.new[inst]} in (loop :out) let instEra = inst in loop :out
  .era => [s] s begin :inner {
    .empty! => loop :out
    .item(t) s => do {instEra.era(t)} in s loop :inner
  }
}

dec Stack_pop: [type T] [Stack<T>] (Option<T>) Stack<T>
def Stack_pop = [type T] [s] s {
  .item(t) s => (.some t) s,
  .empty! => (.none!) .empty!
}

dec Stack_push: [type T] [Stack<T>] [T] Stack<T>
def Stack_push = [type T] [s] [t] .item (t) s

dec Stack_reverse: [type T] [Stack<T>] Stack<T>
def Stack_reverse = [type T] [s] let snew: Stack<T> = .empty! in s begin {
  .empty! => snew,
  .item(t) s => let snew = Stack_push(type T)(snew)(t) in s loop
}

// def test_Stack_reverse = Stack_reverse(type Nat)(.item(one) .item(two) .item(three) .empty!)

type Queue<T> =
  (Stack<T>)
  Stack<T>

dec Queue_new: [type T] Queue<T>
def Queue_new = [type T] (Stack_new(type T)) Stack_new(type T)

dec instEraQueue: [type T] [Era<T>] Era<Queue<T>>
def instEraQueue = [type T] [instEra]
  let instEraStack = instEraStack(type T)(instEra) in
  begin {
    .end => do {instEraStack.end?} in !
    .new => do {instEraStack.new[inst]} in (loop) let instEraStack = inst in loop
    .era((l) r) => do {
      instEraStack.era(l).era(r)
    } in loop
  }

dec Queue_push: [type T] [Queue<T>] [T] Queue<T>
def Queue_push = [type T] [(l) r] [t]
  let l = Stack_push(type T)(l)(t) in
  (l)r

dec Queue_pop: [type T] [Queue<T>] (Option<T>) Queue<T>
def Queue_pop = [type T] [(l) r] r {
  .item(t) r => (.some t) (l)r,
  .empty! => let r = Stack_reverse(type T)(l) in let l: Stack<T> = .empty! in r {
    .empty! => (.none!) (l) .empty!
    .item(t) r => (.some t) (l) r
  }
}

// def test_Queue_pop = Queue_pop(type Nat)((.item (one) .empty!) .item (three) .item (two) .empty!)

// A semigroup has an associative operation called `mul`.
// Par doesn't (currently?) have proofs so this is equivalent to `Mul`.
// See <https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html#Semigroup>
type Semigroup<T> = iterative {
  .end => !
  .new => (self) self
  .mul(T)(T) => (T) self // since instances are explicitly named conflict with Mul.mul with subtyping is fine (actually makes Mul the same as Semigroup)
}

// Stack which keeps track of cumulative semigroup value
// Order is (item) cumulative_measure
type SemigroupStack<T> = Stack<(T) T>

dec SemigroupStack_new: [type T] SemigroupStack<T>
def SemigroupStack_new = [type T] Stack_new(type (T) T)

dec instEraPair: [type T] [Era<T>] Era<(T) T>
def instEraPair = [type T] [instEra] begin {
    .end => do {instEra.end?} in !
    .new => do {instEra.new[inst]} in (loop) let instEra = inst in loop
    .era((t1: T) t2: T) => do {instEra.era(t1).era(t2)} in loop
  }

dec instDupPair: [type T] [Dup<T>] Dup<(T) T>
def instDupPair = [type T] [instDup] begin {
    .end => do {instDup.end?} in !
    .new => do {instDup.new[inst]} in (loop) let instDup = inst in loop
    .dup((t1: T) t2: T) => do {instDup.dup(t1)[t1][t12].dup(t2)[t2][t22]}
      in ((t1) t2) ((t12) t22) loop
  }

dec instEraSemigroupStack: [type T] [Era<T>] Era<SemigroupStack<T>>
def instEraSemigroupStack = [type T] [instEra]
  let instEraPair = instEraPair(type T)(instEra) in
  let instEraStack = instEraStack(type (T) T)(instEraPair) in
  begin {
    .end => do {instEraStack.end?} in !
    .new => do {instEraStack.new[inst]} in (loop) let instEraStack = inst in loop
    .era(t) => do {instEraStack.era(t)} in loop
  }

dec SemigroupStack_pop: [type T] [SemigroupStack<T>] (Option<(T) T>) SemigroupStack<T>
def SemigroupStack_pop = [type T] [s] Stack_pop(type (T) T)(s)

dec SemigroupStack_push: [type T] [Dup<T>] [Semigroup<T>] [SemigroupStack<T>] [T] SemigroupStack<T>
def SemigroupStack_push = [type T] [instDup] [instSemigroup] [s] [t]
  do {instDup.dup(t)[t][t2]} in
  let (p)s = SemigroupStack_pop(type T)(s) in p { // Peek
    .none! => do {instSemigroup.end? instDup.end?} in Stack_push(type (T) T)(s)((t) t2),
    .some(p) pm =>
      do {instDup.dup(pm)[pm][pm2]} in
      let s = Stack_push(type (T) T)(s)((p) pm) in // return peeked element back into the stack
      do {instSemigroup.mul(pm2)(t2)[tm]} in
      do {instSemigroup.end? instDup.end?} in
      Stack_push(type (T) T)(s)((t) tm)
  }

dec SemigroupStack_peek: [type T] [Era<T>] [Dup<T>] [Semigroup<T>] [SemigroupStack<T>] (Option<(T) T>) SemigroupStack<T>
def SemigroupStack_peek = [type T] [instEra] [instDup] [instSemigroup] [s]
  do {instDup.new[inst]} in
  let instDupPair = instDupPair(type T)(inst) in
  let (t)s = SemigroupStack_pop(type T)(s) in t {
  .none! => do {instEra.end? instSemigroup.end? instDupPair.end? instDup.end?}
    in (.none !) s,
  .some t =>
    do {instDupPair.dup(t)[t][t2]} in
    let s: SemigroupStack<T> = .item (t) s in
    do {instEra.end? instSemigroup.end? instDupPair.end? instDup.end?} in
    (.some t2) s
}


dec SemigroupStack_reverse: [type T] [Era<T>] [Dup<T>] [Semigroup<T>] [SemigroupStack<T>] SemigroupStack<T>
def SemigroupStack_reverse = [type T] [instEra] [instDup] [instSemigroup] [s] let snew: SemigroupStack<T> = SemigroupStack_new(type T) in s begin {
  .empty! => do {instSemigroup.end? instDup.end? instEra.end?} in snew,
  .item((t) m) s => do {
    instEra.era(m)
    instDup.new[instDup2]
    instSemigroup.new[instSemigroup2]
    } in
    let snew = SemigroupStack_push(type T)(instDup2)(instSemigroup2)(snew)(t)
    in s loop
}

// See <https://byorgey.github.io/blog/posts/2024/11/27/stacks-queues.html>
// This is slightly more general because `T` doesn't need an identity element.
type SemigroupQueue<T> = Queue<(T) T>

dec SemigroupQueue_new: [type T] SemigroupQueue<T>
def SemigroupQueue_new = [type T] Queue_new(type (T) T)

dec instEraSemigroupQueue: [type T] [Era<T>] Era<SemigroupQueue<T>>
def instEraSemigroupQueue = [type T] [instEra]
  let instEraPair = instEraPair(type T)(instEra) in
  let instEraQueue = instEraQueue(type (T) T)(instEraPair) in
  begin {
    .end => do {instEraQueue.end?} in !
    .new => do {instEraQueue.new[inst]} in (loop) let instEraQueue = inst in loop
    .era(q) => do {instEraQueue.era(q)}  in loop
  }

dec SemigroupQueue_push: [type T] [Dup<T>] [Semigroup<T>] [SemigroupQueue<T>] [T] SemigroupQueue<T>
def SemigroupQueue_push = [type T] [instDup] [instSemigroup] [(l) r] [t]
  let l = SemigroupStack_push(type T)(instDup)(instSemigroup)(l)(t) in
  (l)r

dec SemigroupQueue_pop: [type T] [Era<T>] [Dup<T>] [Semigroup<T>] [SemigroupQueue<T>] (Option<(T) T>) SemigroupQueue<T>
def SemigroupQueue_pop = [type T] [instEra] [instDup] [instSemigroup] [(l) r]
  let (t)r = SemigroupStack_pop(type T)(r) in t {
    .some t => do {instEra.end? instDup.end? instSemigroup.end?} in (.some t) (l)r,
    .none! => do {instEra.new[inst]} in
      do {instEraSemigroupStack(type T)(inst).era(r).end?} in
      do {instEra.new[inst]} in
      let r = SemigroupStack_reverse(type T)(inst)(instDup)(instSemigroup)(l) in
      let l = SemigroupStack_new(type T) in
      let (t)r = SemigroupStack_pop(type T)(r) in t {
        .none! =>  do {instEraSemigroupStack(type T)(instEra).era(r).end?} in
          (.none!) (l) .empty!
        .some t => do {instEra.end?} in (.some t) (l) r
  }
}

dec SemigroupQueue_peek: [type T] [Era<T>] [Dup<T>] [Semigroup<T>] [SemigroupQueue<T>] (Option<(T) T>) SemigroupQueue<T>
def SemigroupQueue_peek = [type T] [instEra] [instDup] [instSemigroup] [(l)r]
  do {
    instEra.new[instEra2].new[instEra3]
    instDup.new[instDup2].new[instDup3]
    instSemigroup.new[instSemigroup2].new[instSemigroup3]
  } in
  let (tl)l = SemigroupStack_peek(type T)(instEra2)(instDup2)(instSemigroup2)(l) in
  let (tr)r = SemigroupStack_peek(type T)(instEra3)(instDup3)(instSemigroup3)(r) in

  // Use larger of the two measures if both stacks have elements.
  // If only 1 stack make sure it is the right stack, and use that measure.
  tl {
    .none! => tr {
      .none! => do {
        instEra.end?
        instSemigroup.end?
        instDup.end?
      } in (.none!) (l) r,
      .some(tr)trm => do {
        instEra.end?
        instSemigroup.end?
        instDup.end?
      } in (.some (tr) trm) (l) r
    }
    .some (tl)tlm => tr {
      .none! => do {
          instEra.era(tl).era(tlm).new[instEra2].new[instEra3]
          instDup.new[instDup2]
          instSemigroup.new[instSemigroup2]
        } in
        do {instEraSemigroupStack(type T)(instEra2).era(r).end?} in
        let r = SemigroupStack_reverse(type T)(instEra3)(instDup2)(instSemigroup2)(l) in
        let l = SemigroupStack_new(type T) in
        // Repeat now that the left stack is empty and the right is not.
{
do {
    instEra.new[instEra2].new[instEra3]
    instDup.new[instDup2].new[instDup3]
    instSemigroup.new[instSemigroup2].new[instSemigroup3]
  } in
  let (tl)l = SemigroupStack_peek(type T)(instEra2)(instDup2)(instSemigroup2)(l) in
  let (tr)r = SemigroupStack_peek(type T)(instEra3)(instDup3)(instSemigroup3)(r) in

  // Use larger of the two measures if both stacks have elements.
  // If only 1 stack make sure it is the right stack, and use that measure.
  tl {
    .none! => tr {
      .none! => do {
        instEra.end?
        instSemigroup.end?
        instDup.end?
      } in (.none!) (l) r,
      .some(tr)trm => do {
        instEra.end?
        instSemigroup.end?
        instDup.end?
      } in (.some (tr) trm) (l) r
    }
    .some (tl)tlm => tr {
      //unreachable
      .none! => do {
          instEra.era(tl).era(tlm).end?
          instDup.end?
          instSemigroup.end?
        } in
        // Repeat now that the left stack is empty and the right is not.
        (.none!) (l) r,
      .some (tr)trm => do {
        instSemigroup.mul(tlm)(trm)[tm].end?
        instEra.era(tl).end?
        instDup.end?
      } in (.some (tr) tm) (l) r
    }
  }
},
      .some (tr)trm => do {
        instSemigroup.mul(tlm)(trm)[tm].end?
        instEra.era(tl).end?
        instDup.end?
      } in (.some (tr) tm) (l) r
    }
  }

dec Nat_max: [Nat] [Nat] Nat
def Nat_max = [n] [m] n begin {
  .zero! => m,
  .succ n => m {
    .zero! => .succ n,
    .succ m => .succ n loop
  }
}

dec Nat_min: [Nat] [Nat] Nat
def Nat_min = [n] [m] n begin {
  .zero! => do {instEraNat.era(m).end?} in .zero!
  .succ n => m {
    .zero! => do {instEraNat.era(n).end?} in .zero!
    .succ m => .succ n loop
  }
}

dec instSemigroupNatMax: Semigroup<Nat>
def instSemigroupNatMax = begin {
  .end => !
  .new => (loop) loop
  .mul (n) (m) => (Nat_max(n)(m)) loop
}

dec instSemigroupNatMin: Semigroup<Nat>
def instSemigroupNatMin = begin {
  .end => !
  .new => (loop) loop
  .mul (n) (m) => (Nat_min(n)(m)) loop
}

dec instSemigroupNatAdd: Semigroup<Nat>
def instSemigroupNatAdd = begin {
  .end => !
  .new => (loop) loop
  .mul (n) (m) => (Nat_add(n)(m)) loop
}


// def testSemigroupQueue_pop = let ns = nats in
//   do {ns.next[n1].next[n2].next[n3]} in
//   let q = SemigroupQueue_new(type Nat) in
//   let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroupNatMax)(q)(n1) in
//   let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroupNatMax)(q)(n2) in
//   let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroupNatMax)(q)(n3) in
//
//   let [v]q = SemigroupQueue_peek(type Nat)(instEraNat)(instDupNat)(instSemigroupNatMax)(q) in
//   (v)
//   let [v]q = SemigroupQueue_pop(type Nat)(instEraNat)(instDupNat)(instSemigroupNatMax)(q) in
//   let r = v {
//       none ? => !
//       some v => do { instEraPair(type Nat)(instEraNat).era(v).end?} in !
//     } in
//   do {r?} in
//
//   do {ns.next[n]} in
//   let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroupNatMax)(q)(n) in
//
//   let [v]q = SemigroupQueue_pop(type Nat)(instEraNat)(instDupNat)(instSemigroupNatMax)(q) in
//
//   do {ns.end?} in (v) q


// def test_SemigroupStack_reverse =
//   let s = SemigroupStack_new(type Nat) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(three) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(two) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(one) in
//   SemigroupStack_reverse(type Nat)(instEraNat)(instDupNat)(instSemigroupNatMax)(s)
//
// def test_SemigroupStack_reverse2 =
//   let s = SemigroupStack_new(type Nat) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(one) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(two) in
//   let s = SemigroupStack_push(type Nat)(instDupNat)(instSemigroupNatMax)(s)(three) in
//   SemigroupStack_reverse(type Nat)(instEraNat)(instDupNat)(instSemigroupNatMax)(s)

// Output a stream of the running measure over a 3 element wide window of nats.
dec semigroup_win3_nats: [Semigroup<Nat>] Stream<Nat>
def semigroup_win3_nats = [instSemigroup]
  let ns = nats in
  do {ns.next[n1].next[n2].next[n3]} in
  let q = SemigroupQueue_new(type Nat) in
  do {instSemigroup.new[instSemigroup2].new[instSemigroup3].new[instSemigroup4]} in
  let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroup2)(q)(n1) in
  let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroup3)(q)(n2) in
  let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroup4)(q)(n3) in
  begin {
    .end => do {
      instSemigroup.end?
      instEraSemigroupQueue(type Nat)(instEraNat).era(q).end?
      ns.end?
    } in !
    .next =>
      do {instSemigroup.new[instSemigroup2]} in
      let (t)q = SemigroupQueue_peek(type Nat)(instEraNat)(instDupNat)(instSemigroup2)(q) in
      (t {
        .none! => zero, // unreachable
        .some (t)tm => do {instEraNat.era(t).end?} in tm
      })
      do {instSemigroup.new[instSemigroup2]} in
      let (v)q = SemigroupQueue_pop(type Nat)(instEraNat)(instDupNat)(instSemigroup2)(q) in
      v {
        .none! => loop // unreachable
        .some (v)vm =>
          do {
            instEraNat.era(v).era(vm).end?
            instSemigroup.new[instSemigroup2]
            ns.next[n]
          } in
          let q = SemigroupQueue_push(type Nat)(instDupNat)(instSemigroup2)(q)(n) in
          loop
      }
  }

def test_max_semigroup_win3_nats = semigroup_win3_nats(instSemigroupNatMax)
def test_min_semigroup_win3_nats = semigroup_win3_nats(instSemigroupNatMin)
def test_add_semigroup_win3_nats = semigroup_win3_nats(instSemigroupNatAdd)
def test_mul_semigroup_win3_nats = semigroup_win3_nats(instMulNat) // subtyping
