def listrgb =
  .item(.red!)
  .item(.green!)
  .item(.blue!)
  .empty!

def rgb = [value] value {
  red?   => .red!
  green? => .green!
  blue?  => .blue!
}

def zip = [list][seq] list begin {
  empty? => do {
    seq.close?
  } in .empty!

  item[x] xs => do {
    seq.next[y]
    let y = rgb(y)
  } in .item((x)(y)!) xs loop
}

def zip_rgbs = zip(listrgb)

def zip2 = [seq1][seq2] begin {
  close => do {
    seq1.close?
    seq2.close?
  } in !

  next => do {
    seq1.next[x]
    seq2.next[y]
  } in ((x)(y)!) loop
}

def concat = [left][right] left begin {
  empty?     => right
  item[x] xs => .item(x) xs loop
}

def tree_of_colors =
  .node
    (.node
      (.empty!)
      (.red!)
      (.empty!)!)
    (.green!)
    (.node
      (.node
        (.empty!)
        (.yellow!)
        (.empty!)!)
      (.blue!)
      (.empty!)!)!

def flatten_process_syntax = chan caller {
  caller[tree]

  let caller = chan return {
    tree begin {
      empty? => {
        return <> caller
      }

      node[left][value][right]? => {
        let caller = chan return { left loop }
        caller.item(value)
        let caller = chan return { right loop }
        return <> caller
      }
    }
  }

  caller.empty!
}

type List<T> = recursive either {
  .empty!
  .item(T) self
}

type Tree<T> = recursive either {
  .empty!
  .node(self)(T)(self)!
}

dec flatten : [type T] [Tree<T>] List<T>
def flatten = [type T] [tree] chan yield {
  let yield = tree begin {
    empty? => yield

    node[left][value][right]? => do {
      let yield = left loop
      yield.item(value)
    } in right loop
  }

  yield.empty!
}

def flattened = flatten(tree_of_colors)

def true  = chan result { result.true! }
def false = chan result { result.false! }

def list_of_booleans = chan consumer {
  consumer
    .item(true)
    .item(false)
    .item(false)
    .item(true)
    .item(true)
    .item(false)
    .empty!
}

def reverse = chan caller {
  caller[list]

  let caller = chan return {
    list begin {
      empty? => {
        return <> caller
      }

      item[value] => {
        let caller = chan return { list loop }
        caller.item(value)
        return <> caller
      }
    }
  }

  caller.empty!
}

def reverse_bools = reverse(list_of_booleans)
